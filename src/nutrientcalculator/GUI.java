/**
 * Isaac Wismer
 */
/**
 * TODO: Fix Help Menu Optimize
 *
 */
package nutrientcalculator;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.io.*;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author isaac
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        //make windows appear in the middle of the screen
        setLocationRelativeTo(null);
        frameRecepieEntry.setLocationRelativeTo(null);
        frameAbout.setLocationRelativeTo(null);
        frameDirections.setLocationRelativeTo(null);
        frameHelp.setLocationRelativeTo(null);
        frameTitle.setLocationRelativeTo(null);
        lblLoad.setVisible(false);
        framePrint.setLocationRelativeTo(null);
        c = new Container();

    }
    //static variables
    static double portionAmount;
    static boolean update;
    static Recipe recipe = new Recipe();
    static DefaultComboBoxModel model = new DefaultComboBoxModel();
    ArrayList<Ingredient> ingList = new ArrayList<>(0);
    Container c;
    //non static variables
    Ingredient selected;
    int numIngredients, editSelection = 0;
    boolean edit = false, dontShow = false;
    ArrayList<Object[]> matches = new ArrayList<>(0);
    ArrayList<Ingredient> matchesIngr;
    public ArrayList<easyEntryPanel> panels;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frameRecepieEntry = new javax.swing.JFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        listResults = new javax.swing.JList();
        tfName = new javax.swing.JTextField();
        cmbFraction = new javax.swing.JComboBox();
        cmbUnit = new javax.swing.JComboBox();
        btnOK1 = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnSearch2 = new javax.swing.JButton();
        btnUseSelected = new javax.swing.JButton();
        btnHelp1 = new javax.swing.JButton();
        spQuantity = new javax.swing.JSpinner();
        cmbCategory = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        frameAbout = new javax.swing.JDialog();
        btnCloseAbout = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        frameDirections = new javax.swing.JFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDirections = new javax.swing.JTextArea();
        btnOK3 = new javax.swing.JButton();
        frameHelp = new javax.swing.JFrame();
        cmbHelp = new javax.swing.JComboBox();
        jScrollPane5 = new javax.swing.JScrollPane();
        taHelp = new javax.swing.JTextArea();
        frameTitle = new javax.swing.JFrame();
        jLabel1 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        taInstructions = new javax.swing.JTextArea();
        btnOK4 = new javax.swing.JButton();
        btnCancel2 = new javax.swing.JButton();
        fcSave = new javax.swing.JFileChooser();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        fcPrinter = new javax.swing.JFileChooser();
        framePrint = new javax.swing.JFrame();
        scrollPane = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuSave = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        MenuPrint = new javax.swing.JMenu();
        menuHelp = new javax.swing.JMenu();
        menuAbout = new javax.swing.JMenu();
        frameEasyEntry = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        btnRemove = new javax.swing.JButton();
        btnCalculate = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnHelp2 = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnTitle = new javax.swing.JButton();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        lblLoad = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listRecipe = new javax.swing.JList();
        jMenuBar2 = new javax.swing.JMenuBar();
        menuSave1 = new javax.swing.JMenu();
        menuOpen1 = new javax.swing.JMenu();
        menuHelp1 = new javax.swing.JMenu();
        menuAbout1 = new javax.swing.JMenu();
        menuOptions = new javax.swing.JMenu();
        menuCheckEasyEntry = new javax.swing.JCheckBoxMenuItem();

        frameRecepieEntry.setTitle("Enter Ingredient");
        frameRecepieEntry.setMinimumSize(new java.awt.Dimension(1000, 510));

        listResults.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listResults.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listResultsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listResults);

        tfName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfNameKeyPressed(evt);
            }
        });

        cmbFraction.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1/4 Teaspoon", "1/2 Teaspoon", "1 Teaspoon", "1 Tablespoon", "1/4 Cup", "1/3 Cup", "1/2 Cup", "1 Cup" }));
        cmbFraction.setEnabled(false);

        cmbUnit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Metric Cooking Measures", "mL", "g" }));
        cmbUnit.setEnabled(false);
        cmbUnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbUnitActionPerformed(evt);
            }
        });

        btnOK1.setText("OK");
        btnOK1.setEnabled(false);
        btnOK1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOK1ActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnSearch2.setText("Search");
        btnSearch2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearch2ActionPerformed(evt);
            }
        });

        btnUseSelected.setText("Use Selected Food");
        btnUseSelected.setEnabled(false);
        btnUseSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUseSelectedActionPerformed(evt);
            }
        });

        btnHelp1.setText("Help");
        btnHelp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelp1ActionPerformed(evt);
            }
        });

        spQuantity.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        cmbCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCategoryActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Category");

        javax.swing.GroupLayout frameRecepieEntryLayout = new javax.swing.GroupLayout(frameRecepieEntry.getContentPane());
        frameRecepieEntry.getContentPane().setLayout(frameRecepieEntryLayout);
        frameRecepieEntryLayout.setHorizontalGroup(
            frameRecepieEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameRecepieEntryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frameRecepieEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frameRecepieEntryLayout.createSequentialGroup()
                        .addGroup(frameRecepieEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(frameRecepieEntryLayout.createSequentialGroup()
                                .addComponent(btnSearch2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnUseSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(frameRecepieEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(frameRecepieEntryLayout.createSequentialGroup()
                                .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(6, 6, 6)
                        .addGroup(frameRecepieEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frameRecepieEntryLayout.createSequentialGroup()
                                .addComponent(btnHelp1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnOK1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(frameRecepieEntryLayout.createSequentialGroup()
                                .addComponent(cmbFraction, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        frameRecepieEntryLayout.setVerticalGroup(
            frameRecepieEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frameRecepieEntryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frameRecepieEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(frameRecepieEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(spQuantity))
                    .addGroup(frameRecepieEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbFraction)
                        .addComponent(cmbUnit)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frameRecepieEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(frameRecepieEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnOK1, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                        .addComponent(btnBack, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                        .addComponent(btnSearch2, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                        .addComponent(btnUseSelected, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                        .addComponent(btnHelp1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(frameRecepieEntryLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                .addContainerGap())
        );

        frameAbout.setTitle("About");
        frameAbout.setMinimumSize(new java.awt.Dimension(404, 260));
        frameAbout.setName("About"); // NOI18N
        frameAbout.setResizable(false);

        btnCloseAbout.setText("Close");
        btnCloseAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseAboutActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(240, 240, 240));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Lucida Console", 0, 12)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Recipe Nutrient Analysis\nv1.3.0\nJuly 12 2015\nBy Isaac Wismer\n\nThis program uses the Canadian Nutrient File 2010\nFor more information visit:\nhttp://www.hc-sc.gc.ca/fn-an/nutrition/\n\tfiche-nutri-data/index-eng.php\nPlease do not distribute\nTo report a bug please email idw.wismer@gmail.com");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setAutoscrolls(false);
        jTextArea1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane4.setViewportView(jTextArea1);

        javax.swing.GroupLayout frameAboutLayout = new javax.swing.GroupLayout(frameAbout.getContentPane());
        frameAbout.getContentPane().setLayout(frameAboutLayout);
        frameAboutLayout.setHorizontalGroup(
            frameAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameAboutLayout.createSequentialGroup()
                .addGroup(frameAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frameAboutLayout.createSequentialGroup()
                        .addGap(331, 331, 331)
                        .addComponent(btnCloseAbout))
                    .addGroup(frameAboutLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        frameAboutLayout.setVerticalGroup(
            frameAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameAboutLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCloseAbout)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        frameDirections.setTitle("Directions");
        frameDirections.setMinimumSize(new java.awt.Dimension(600, 475));
        frameDirections.setResizable(false);

        taDirections.setColumns(20);
        taDirections.setRows(5);
        jScrollPane1.setViewportView(taDirections);

        btnOK3.setText("OK");
        btnOK3.setToolTipText("");
        btnOK3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOK3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frameDirectionsLayout = new javax.swing.GroupLayout(frameDirections.getContentPane());
        frameDirections.getContentPane().setLayout(frameDirectionsLayout);
        frameDirectionsLayout.setHorizontalGroup(
            frameDirectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameDirectionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frameDirectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frameDirectionsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnOK3)))
                .addContainerGap())
        );
        frameDirectionsLayout.setVerticalGroup(
            frameDirectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameDirectionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOK3)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        frameHelp.setMinimumSize(new java.awt.Dimension(800, 500));
        frameHelp.setResizable(false);

        cmbHelp.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Output Window", "Recipe Ingredient List", "Ingredient List", "Save/Open" }));
        cmbHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbHelpActionPerformed(evt);
            }
        });

        taHelp.setEditable(false);
        taHelp.setColumns(20);
        taHelp.setRows(5);
        jScrollPane5.setViewportView(taHelp);

        javax.swing.GroupLayout frameHelpLayout = new javax.swing.GroupLayout(frameHelp.getContentPane());
        frameHelp.getContentPane().setLayout(frameHelpLayout);
        frameHelpLayout.setHorizontalGroup(
            frameHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameHelpLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frameHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 771, Short.MAX_VALUE)
                    .addGroup(frameHelpLayout.createSequentialGroup()
                        .addComponent(cmbHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        frameHelpLayout.setVerticalGroup(
            frameHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameHelpLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmbHelp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                .addContainerGap())
        );

        frameTitle.setMinimumSize(new java.awt.Dimension(623, 502));

        jLabel1.setText("Title");

        jLabel3.setText("Insructions/Description");

        taInstructions.setColumns(20);
        taInstructions.setRows(5);
        jScrollPane6.setViewportView(taInstructions);

        btnOK4.setText("OK");
        btnOK4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOK4ActionPerformed(evt);
            }
        });

        btnCancel2.setText("Cancel");
        btnCancel2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancel2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frameTitleLayout = new javax.swing.GroupLayout(frameTitle.getContentPane());
        frameTitle.getContentPane().setLayout(frameTitleLayout);
        frameTitleLayout.setHorizontalGroup(
            frameTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frameTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE)
                    .addComponent(tfTitle)
                    .addGroup(frameTitleLayout.createSequentialGroup()
                        .addGroup(frameTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frameTitleLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCancel2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnOK4, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        frameTitleLayout.setVerticalGroup(
            frameTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frameTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOK4)
                    .addComponent(btnCancel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        fcSave.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        fcSave.setDialogTitle("");
        fcSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fcSaveActionPerformed(evt);
            }
        });

        framePrint.setTitle("Output");
        framePrint.setMinimumSize(new java.awt.Dimension(926, 673));

        output.setColumns(20);
        output.setFont(new java.awt.Font("Monospaced", 0, 15)); // NOI18N
        output.setRows(5);
        scrollPane.setViewportView(output);

        menuSave.setText("Save");

        jMenuItem1.setText("Save Recipe");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menuSave.add(jMenuItem1);

        jMenuItem2.setText("Save Output");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        menuSave.add(jMenuItem2);

        jMenuBar1.add(menuSave);

        MenuPrint.setText("Print");
        MenuPrint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MenuPrintMouseClicked(evt);
            }
        });
        jMenuBar1.add(MenuPrint);

        menuHelp.setText("Help");
        menuHelp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuHelpMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuHelp);

        menuAbout.setText("About");
        menuAbout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuAboutMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuAbout);

        framePrint.setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout framePrintLayout = new javax.swing.GroupLayout(framePrint.getContentPane());
        framePrint.getContentPane().setLayout(framePrintLayout);
        framePrintLayout.setHorizontalGroup(
            framePrintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(framePrintLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 906, Short.MAX_VALUE)
                .addContainerGap())
        );
        framePrintLayout.setVerticalGroup(
            framePrintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, framePrintLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE)
                .addContainerGap())
        );

        frameEasyEntry.setMinimumSize(new java.awt.Dimension(875, 550));
        frameEasyEntry.setPreferredSize(new java.awt.Dimension(875, 550));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 875, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 550, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout frameEasyEntryLayout = new javax.swing.GroupLayout(frameEasyEntry.getContentPane());
        frameEasyEntry.getContentPane().setLayout(frameEasyEntryLayout);
        frameEasyEntryLayout.setHorizontalGroup(
            frameEasyEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        frameEasyEntryLayout.setVerticalGroup(
            frameEasyEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Canadian Nutrient File Search");
        setIconImages(null);

        btnRemove.setText("Remove Selected");
        btnRemove.setEnabled(false);
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnCalculate.setText("Get Nutrition Facts");
        btnCalculate.setEnabled(false);
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });

        btnAdd.setText("Add Food Item");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnHelp2.setText("Help");
        btnHelp2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelp2ActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit Food Item");
        btnEdit.setEnabled(false);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnTitle.setText("Add/Edit Title/Instructions");
        btnTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTitleActionPerformed(evt);
            }
        });

        lblLoad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nutrientcalculator/data/loader.gif"))); // NOI18N
        lblLoad.setText("Calculating Nutrients...");
        lblLoad.setToolTipText("");
        lblLoad.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblLoad.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        listRecipe.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listRecipeValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(listRecipe);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addGap(384, 384, 384)
                    .addComponent(lblLoad)
                    .addContainerGap(384, Short.MAX_VALUE)))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addGap(174, 174, 174)
                    .addComponent(lblLoad)
                    .addContainerGap(175, Short.MAX_VALUE)))
        );
        jLayeredPane1.setLayer(lblLoad, javax.swing.JLayeredPane.POPUP_LAYER);
        jLayeredPane1.setLayer(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        menuSave1.setText("Save");
        menuSave1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuSave1MouseClicked(evt);
            }
        });
        jMenuBar2.add(menuSave1);

        menuOpen1.setText("Open");
        menuOpen1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuOpen1MouseClicked(evt);
            }
        });
        jMenuBar2.add(menuOpen1);

        menuHelp1.setText("Help");
        menuHelp1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuHelp1MouseClicked(evt);
            }
        });
        jMenuBar2.add(menuHelp1);

        menuAbout1.setText("About");
        menuAbout1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuAbout1MouseClicked(evt);
            }
        });
        jMenuBar2.add(menuAbout1);

        menuOptions.setText("Options");

        menuCheckEasyEntry.setSelected(true);
        menuCheckEasyEntry.setText("Use Easy Entry");
        menuCheckEasyEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCheckEasyEntryActionPerformed(evt);
            }
        });
        menuOptions.add(menuCheckEasyEntry);

        jMenuBar2.add(menuOptions);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnHelp2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCalculate))
                    .addComponent(jLayeredPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnHelp2)
                    .addComponent(btnRemove)
                    .addComponent(btnCalculate)
                    .addComponent(btnEdit)
                    .addComponent(btnTitle)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearch2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearch2ActionPerformed
        ingredientLookUp(false);
    }//GEN-LAST:event_btnSearch2ActionPerformed

    private void btnUseSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUseSelectedActionPerformed
        useSelected();
    }//GEN-LAST:event_btnUseSelectedActionPerformed

    private void cmbUnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbUnitActionPerformed
        //change what is showing depending on what unit is selected
        if (cmbUnit.getSelectedItem() == "Metric Cooking Measures") {
            cmbFraction.setModel(model);
            cmbFraction.setEnabled(true);
        } else if (cmbUnit.getSelectedItem() == "Other") {
            DefaultComboBoxModel model2 = new DefaultComboBoxModel();
            if (edit) {
                for (int i = 0; i < selected.getMeasures().size(); i++) {
                    model2.addElement(selected.getSingleMeasureIndex(i).getName());
                }
            } else {
                model2 = Database.measures(selected.getID());
            }
            cmbFraction.setModel(model2);
            cmbFraction.setEnabled(true);
        } else {
            cmbFraction.setEnabled(false);
        }

    }//GEN-LAST:event_cmbUnitActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (menuCheckEasyEntry.isSelected()) {
            frameEasyEntry.setLocationRelativeTo(this);
            frameEasyEntry.setVisible(true);
            //panels = new ArrayList<>();
            easyEntryPanel panel = new easyEntryPanel(this);
            //frameEasyEntry.setContentPane(jPanel1);
            //frameEasyEntry.getContentPane().add(panel);
            c=frameEasyEntry.getContentPane();
            c.add(panel, BorderLayout.NORTH);
            c.add(new JLabel("HI"));
            frameEasyEntry.setVisible(true);
            //frameEasyEntry.setContentPane(jPanel1);
            //frameEasyEntry.getContentPane().add(new JLabel("HI"));
            //frameEasyEntry.getContentPane().add(panel);
        } else {
            //reset the add ingredient window
            DefaultListModel empty = new DefaultListModel();
            tfName.setText(null);
            listResults.setModel(empty);
            cmbUnit.setSelectedIndex(0);
            cmbFraction.setEnabled(false);
            cmbUnit.setEnabled(false);
            spQuantity.setEnabled(false);
            frameRecepieEntry.setVisible(true);
            btnOK1.setEnabled(false);
            edit = false;
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        frameRecepieEntry.setVisible(false);
    }//GEN-LAST:event_btnBackActionPerformed

    private void tfNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            ingredientLookUp(false);
        }
    }//GEN-LAST:event_tfNameKeyPressed

    private void btnOK1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOK1ActionPerformed
        int temp;
        String ingredient = "";
        if (cmbUnit.getSelectedItem() == "Metric Cooking Measures") {
            //add the correct fraction to the begining of the ingredient name
            if ((int) spQuantity.getValue() > 1) {
                temp = Integer.parseInt(cmbFraction.getSelectedItem().toString().substring(0, 1)) * (int) spQuantity.getValue();
                if (cmbFraction.getSelectedIndex() != 2 && cmbFraction.getSelectedIndex() != 3 && cmbFraction.getSelectedIndex() != 7) {//not full measures eg 1 cup
                    if (temp / Integer.parseInt(cmbFraction.getSelectedItem().toString().substring(2, 3)) >= 1) {
                        if (temp % Double.parseDouble(cmbFraction.getSelectedItem().toString().substring(2, 3)) == 0) {
                            ingredient = temp / Integer.parseInt(cmbFraction.getSelectedItem().toString().substring(2, 3)) + cmbFraction.getSelectedItem().toString().substring(3);
                            if (temp / Integer.parseInt(cmbFraction.getSelectedItem().toString().substring(2, 3)) > 1) {
                                ingredient += "s";
                            }
                            ingredient += " " + tfName.getText();
                        } else {
                            ingredient += (int) Math.floor(temp / Double.parseDouble(cmbFraction.getSelectedItem().toString().substring(2, 3)));
                            temp -= Double.parseDouble(cmbFraction.getSelectedItem().toString().substring(2, 3));
                            double temp2 = (double) temp / Double.parseDouble(cmbFraction.getSelectedItem().toString().substring(2, 3));
                            temp2 -= Math.floor(temp2);//leftovers
                            if (temp2 == 0.25) {
                                ingredient += " 1/4";
                            } else if (temp2 == 0.5) {
                                ingredient += " 1/2";
                            } else if (temp2 == 0.75) {
                                ingredient += " 3/4";
                            } else if ((temp2 + "").substring(2, 3).equals("3")) {
                                ingredient += " 1/3";
                            } else {
                                ingredient += " 2/3";
                            }
                            ingredient += cmbFraction.getSelectedItem().toString().substring(3) + "s" + " " + tfName.getText();
                        }
                    } else {
                        ingredient = temp + cmbFraction.getSelectedItem().toString().substring(1) + "s" + " " + tfName.getText();
                    }
                } else {
                    ingredient = temp + cmbFraction.getSelectedItem().toString().substring(1) + "s" + " " + tfName.getText();
                }
            } else {
                ingredient = cmbFraction.getSelectedItem() + " " + tfName.getText();
            }
        } else if (cmbUnit.getSelectedItem() == "g") {
            if ((int) spQuantity.getValue() < 1000) {
                ingredient = spQuantity.getValue() + "g " + tfName.getText();
            } else {
                ingredient = (Double.parseDouble(spQuantity.getValue().toString()) / 1000.0) + "Kg " + tfName.getText();
            }

        } else if (cmbUnit.getSelectedItem() == "Other") {
            String str = "";
            int i;
            for (i = 0; i < cmbFraction.getSelectedItem().toString().length(); i++) {//get the numbers from the front of the other name
                if (cmbFraction.getSelectedItem().toString().charAt(i) >= 48
                        && cmbFraction.getSelectedItem().toString().charAt(i) <= 57) {
                    str += cmbFraction.getSelectedItem().toString().charAt(i);
                } else {
                    break;
                }
            }
            int num = Integer.parseInt(str);
            int num2 = num * (int) spQuantity.getValue();
            ingredient = num2 + cmbFraction.getSelectedItem().toString().substring(i) + " " + tfName.getText();
        } else {
            if ((int) spQuantity.getValue() < 1000) {
                ingredient = spQuantity.getValue() + "mL " + tfName.getText();
            } else {
                ingredient = (Double.parseDouble(spQuantity.getValue().toString()) / 1000.0) + "L " + tfName.getText();
            }
        }
        //add the information the ingredient object
        selected.setFormattedName(ingredient);
        listRecipe.setModel(recipe.getList());
        selected.setQuantity((int) spQuantity.getValue());
        selected.setFractionNum(cmbFraction.getSelectedIndex());
        if (!cmbUnit.getSelectedItem().equals("g")) {
            selected.setFractionName(cmbFraction.getSelectedItem().toString());
        } else {
            selected.setFractionName(selected.getQuantity() + "g");
        }
        selected.setUnit(cmbUnit.getSelectedItem().toString());
        selected.setUnitNum(cmbUnit.getSelectedIndex());
        frameRecepieEntry.setVisible(false);
        btnCalculate.setEnabled(true);
        if (edit) {//if its an edit change the list of ingredients to reflect the changes
            recipe.getList().removeElementAt(editSelection + 1);
            recipe.getList().insertElementAt(ingredient, editSelection + 1);
            //ingredients.setElementAt(ingredient, editSelection + 1);
            recipe.setSingleIngredient(editSelection + 1, selected);
        } else {//otherwise jsut add a new ingredient
            recipe.setSingleIngredient(recipe.getIngredients().size() - 1, selected);
            recipe.getList().addElement(ingredient);
        }
        edit = false;
    }//GEN-LAST:event_btnOK1ActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        for (int j = listRecipe.getSelectedIndices().length - 1; j >= 0; j--) {
            recipe.remove(listRecipe.getSelectedIndices()[j]);
            recipe.getList().removeElementAt(listRecipe.getSelectedIndices()[j]);
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void listResultsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listResultsValueChanged
        btnUseSelected.setEnabled(true);
        if (!(listResults.getSelectedIndex() >= 0)) {
            btnUseSelected.setEnabled(false);
        }
    }//GEN-LAST:event_listResultsValueChanged

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
        if (recipe.getInstructions().equals("")) {
            int instruction = JOptionPane.showConfirmDialog(null, "Would you like to add instructions to your recipe?");
            if (instruction == JOptionPane.YES_OPTION) {
                frameDirections.setVisible(true);
            } else {
                printOutput();
            }
        } else {
            printOutput();
        }
    }//GEN-LAST:event_btnCalculateActionPerformed

    private void btnCloseAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseAboutActionPerformed
        frameAbout.setVisible(false);
    }//GEN-LAST:event_btnCloseAboutActionPerformed

    private void btnOK3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOK3ActionPerformed
        frameDirections.setVisible(false);
        recipe.setInstructions(recipe.getInstructions() + "\n" + taDirections.getText());
        printOutput();
    }//GEN-LAST:event_btnOK3ActionPerformed

    private void cmbHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbHelpActionPerformed
        help();
    }//GEN-LAST:event_cmbHelpActionPerformed

    private void btnHelp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelp1ActionPerformed
        help();
    }//GEN-LAST:event_btnHelp1ActionPerformed

    private void btnHelp2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelp2ActionPerformed
        help();
    }//GEN-LAST:event_btnHelp2ActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        editSelection = listRecipe.getSelectedIndex();
        edit = true;
        useSelected();
        tfName.setText(recipe.getSingleIngredientIndex(editSelection).getName());
        spQuantity.setValue(recipe.getSingleIngredientIndex(editSelection).getQuantity());
        cmbUnit.setSelectedIndex(recipe.getSingleIngredientIndex(editSelection).getUnitNum());
        cmbFraction.setSelectedIndex(recipe.getSingleIngredientIndex(editSelection).getFractionNum());
        frameRecepieEntry.setVisible(true);
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTitleActionPerformed
        tfTitle.setText(recipe.getTitle());
        taInstructions.setText(recipe.getInstructions());
        frameTitle.setVisible(true);
    }//GEN-LAST:event_btnTitleActionPerformed

    private void btnOK4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOK4ActionPerformed
        recipe.setInstructions(taInstructions.getText());
        recipe.setTitle(tfTitle.getText());
        frameTitle.setVisible(false);
    }//GEN-LAST:event_btnOK4ActionPerformed

    private void btnCancel2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancel2ActionPerformed
        frameTitle.setVisible(false);
    }//GEN-LAST:event_btnCancel2ActionPerformed

    private void fcSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fcSaveActionPerformed
        try {
            if (fcSave.getDialogType() == JFileChooser.SAVE_DIALOG) {
                Database.save(fcSave.getSelectedFile());
            } else {
                recipe.setList(new DefaultComboBoxModel());
                recipe = new Recipe();
                Database.open(fcSave.getSelectedFile());
            }
        } catch (NullPointerException | FileNotFoundException e) {
            System.out.println("Didn't Select File Error: " + e.toString());
        }

    }//GEN-LAST:event_fcSaveActionPerformed

    private void menuSave1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuSave1MouseClicked
        save();
    }//GEN-LAST:event_menuSave1MouseClicked

    private void menuHelp1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuHelp1MouseClicked
        help();
    }//GEN-LAST:event_menuHelp1MouseClicked

    private void menuAbout1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuAbout1MouseClicked
        frameAbout.setVisible(true);
    }//GEN-LAST:event_menuAbout1MouseClicked

    private void menuOpen1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuOpen1MouseClicked
        open();
    }//GEN-LAST:event_menuOpen1MouseClicked

    private void listRecipeValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listRecipeValueChanged
        btnRemove.setEnabled(true);
        btnEdit.setEnabled(true);
        btnCalculate.setEnabled(true);
        editSelection = listRecipe.getSelectedIndex();
        if (!(listRecipe.getSelectedIndex() >= 0)) {
            btnRemove.setEnabled(false);
            btnCalculate.setEnabled(false);
            btnEdit.setEnabled(false);
        }
        if (!recipe.getIngredients().isEmpty()) {
            btnCalculate.setEnabled(true);
        }
    }//GEN-LAST:event_listRecipeValueChanged

    private void menuAboutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuAboutMouseClicked
        frameAbout.setVisible(true);
    }//GEN-LAST:event_menuAboutMouseClicked

    private void menuHelpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuHelpMouseClicked
        help();
    }//GEN-LAST:event_menuHelpMouseClicked

    private void MenuPrintMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MenuPrintMouseClicked
        //Print
    }//GEN-LAST:event_MenuPrintMouseClicked

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        print();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        save();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void cmbCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCategoryActionPerformed
        DefaultListModel m = ingredientLookUp(true);
        String selCat = cmbCategory.getSelectedItem().toString();
        if (!selCat.equals("ALL")) {
            for (int i = matchesIngr.size() - 1; i >= 0; i--) {
                if (matchesIngr.get(i).getName().contains(",")) {
                    if (!matchesIngr.get(i).getName().substring(0, matchesIngr.get(i).getName().indexOf(",")).equals(selCat)) {
                        matchesIngr.remove(i);
                        m.removeElementAt(i);
                    }
                } else {
                    if (!matchesIngr.get(i).getName().equals(selCat)) {
                        matchesIngr.remove(i);
                        m.removeElementAt(i);
                    }
                }
            }
        }
        listResults.setModel(m);
    }//GEN-LAST:event_cmbCategoryActionPerformed

    private void menuCheckEasyEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCheckEasyEntryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuCheckEasyEntryActionPerformed

    /**
     * This method searches using the string provided by the user THIS HAS BEEN
     * FIXE
     *
     * @param research says whether or not it need to regenerate the category
     * list
     */
    public DefaultListModel ingredientLookUp(boolean research) {
        DefaultListModel matchesList = new DefaultListModel();
        DefaultComboBoxModel categories = new DefaultComboBoxModel();
        categories.addElement("ALL");
        matchesIngr = new ArrayList<>();
        //check that the search string isn't too short
        if (tfName.getText().length() < 2) {
            matchesList.addElement("Invalid Keyword (Too short?)");
            listResults.setEnabled(false);
        } else {
            //search for matches
            matchesIngr = Database.search(tfName.getText().toUpperCase());
            if (matchesIngr.isEmpty()) {
                matchesList.addElement("Nothing Found");
                listResults.setEnabled(false);
            } else {
                //add the matches to the list model
                for (int i = 0; i < matchesIngr.size(); i++) {
                    matchesList.addElement(matchesIngr.get(i).getName());
                    if (!research) {
                        String cat;
                        if (matchesIngr.get(i).getName().contains(",")) {
                            cat = matchesIngr.get(i).getName().substring(0, matchesIngr.get(i).getName().indexOf(","));
                        } else {
                            cat = matchesIngr.get(i).getName();
                        }

                        boolean duplicate = false;
                        for (int j = 0; j < categories.getSize(); j++) {
                            if (cat.equals(categories.getElementAt(j))) {
                                duplicate = true;
                                j = categories.getSize() + 1;
                            }
                        }
                        if (!duplicate) {
                            categories.addElement(cat);
                        }

                    }
                }
                if (categories.getSize() > 1) {
                    sortList(categories);
                    cmbCategory.setEnabled(true);
                    cmbCategory.setModel(categories);
                }
                listResults.setEnabled(true);
            }
        }
        //display model
        listResults.setModel(matchesList);
        return matchesList;
    }//fixed

    /**
     * This method gives the user options on how they want their data displayed
     */
    public void printOutput() {
        update = true;
        String data = "";
        boolean cancel = false;
        //label print option
        int label = JOptionPane.showConfirmDialog(null, "Would you like to print your recipe as a label?");
        if (label == JOptionPane.YES_OPTION) {
            boolean valid = false;
            int servings = 1;
            //makes sure that the input is valid and wont give errors
            while (!valid) {
                try {
                    recipe.setServings(Integer.parseInt(JOptionPane.showInputDialog("Please enter the number of servings that this recipe makes")));
                    valid = true;
                } catch (HeadlessException | NumberFormatException e) {
                    valid = false;
                    System.out.println("Error: " + e.toString());
                }
                if (servings < 1) {
                    valid = false;
                }
                if (!valid) {
                    JOptionPane.showMessageDialog(cmbUnit, "That is not a valid input. Please try again");
                }
            }
            valid = false;
            String servingNameEng = "",
                    servingNameFre = "";
            //makes sure that the names are not too long (so thatthey fit in the label
            while (!valid) {
                servingNameEng = JOptionPane.showInputDialog("Please enter the English name/value of the serving eg. 1 Cookie or 30g");
                servingNameFre = JOptionPane.showInputDialog("Please enter the French name/value of the serving eg. 1 Biscuit or 30g");
                if (servingNameEng.length() + servingNameFre.length() > 30 || servingNameEng.equals("") || servingNameFre.equals("")) {
                    JOptionPane.showMessageDialog(null, "That is not a valid name (Too Long/null). Please try again.");
                } else {
                    valid = true;
                    recipe.setServingEng(servingNameEng);
                    recipe.setServingFre(servingNameFre);
                }
            }
            //show load image
            lblLoad.setVisible(true);
            revalidate();
            update(getGraphics());
            Loading.start();
            //get the output
            data = Database.recipe(recipe, true);
        } else if (label == JOptionPane.NO_OPTION) {
            //show loading image
            lblLoad.setVisible(true);
            revalidate();
            update(getGraphics());
            Loading.start();
            //get the output
            data = Database.recipe(recipe, false);
        } else {
            cancel = true;
        }
        update = false;
        lblLoad.setVisible(false);
        if (!cancel) {
            //set the output visible
            output.setText(data);
            framePrint.setVisible(true);
        }
    }

    /**
     * This method shows the help menu
     */
    public void help() {
        boolean visible = frameHelp.isVisible();
        //show help
        frameHelp.setVisible(true);
        //open the selected category
        int category = cmbHelp.getSelectedIndex();
        String helpOutput = "";
        try {
            InputStream is = getClass().getResourceAsStream("data\\help.txt");
            InputStreamReader isr = new InputStreamReader(is);
            BufferedReader br = new BufferedReader(isr);
            boolean eof = false, read = false;
            while (!eof) {
                String line = br.readLine();
                if (line == null) {
                    eof = true;
                } else {
                    if (line.equals(category + "")) {
                        read = true;
                    } else if (line.equals((category + 1) + "")) {
                        read = false;
                    } else if (read) {
                        helpOutput += line + "\n";
                    }
                }
            }
        } catch (IOException ex) {
            System.out.println("Error: " + ex.toString());
        }
        taHelp.setText(helpOutput);
    }

    /**
     * this method opens the save dialog
     */
    public void save() {
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Recipe Files", "xml");
        fcSave.setFileFilter(filter);
        fcSave.showSaveDialog(this);
    }

    /**
     * This method opens a recipe file
     */
    public void open() {
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Recipe Files", "xml");
        fcSave.setFileFilter(filter);
        fcSave.showOpenDialog(this);
//        if (!recipe.isEmpty()) {
//            listRecipe.setModel(ingredients);
//            setVisible(false);
//            btnCalculate.setEnabled(true);
//            numIngredients = ingredients.size();
//        }
        lblLoad.setVisible(false);
    }

    /* This method prints the output of the recipe to a text file
     *
     */
    public void print() {
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Files", "txt");
        fcPrinter.setFileFilter(filter);
        fcPrinter.showSaveDialog(frameAbout);
        if (fcPrinter.getSelectedFile() != null) {
            PrintWriter writer;
            try {
                writer = new PrintWriter(fcPrinter.getSelectedFile());
                writer.print(output.getText());
                writer.close();
            } catch (FileNotFoundException ex) {
                System.out.println("Error:" + ex.toString());
            }
        }

    }

    public void useSelected() {
        DefaultComboBoxModel units = new DefaultComboBoxModel();
        units.addElement("Metric Cooking Measures");
        units.addElement("mL");
        units.addElement("g");
        units.addElement("Other");
        if (!edit) {
            selected = matchesIngr.get(listResults.getSelectedIndex());
            recipe.addIngredient(selected);
        } else {
            selected = recipe.getSingleIngredientIndex(editSelection);
        }
        if (!Database.checkMeasuresML(selected.getID())) {
            units.removeElementAt(0);
            units.removeElementAt(0);
            cmbFraction.setEnabled(false);
        }
        if (selected.getMeasures().isEmpty()) {
            JOptionPane.showMessageDialog(frameRecepieEntry, "Error: No measures available.\nCannot use ingredient; Please choose another.\nBlame the person who made the database.", "Error: No Measures", 1);
        } else {
            if (!edit) {
                selected = recipe.getSingleIngredientIndex(recipe.getIngredients().size() - 1);
            } else {
                while (selected.getSingleMeasureIndex(selected.getMeasures().size() - 1).getName().equals("")) { //prevents empty measures in the list               
                    selected.getMeasures().remove(selected.getMeasures().size() - 1);
                }
            }
            cmbFraction.setEnabled(true);
            cmbUnit.setEnabled(true);
            spQuantity.setEnabled(true);
            cmbUnit.setModel(units);
            cmbFraction.setModel(model);
            tfName.setText(selected.getName());
            spQuantity.setValue(1);
            btnOK1.setEnabled(true);
        }
    }

    public ComboBoxModel sortList(DefaultComboBoxModel list) {
        String[] array = new String[list.getSize() - 1];
        for (int i = 1; i < list.getSize(); i++) {
            array[i - 1] = list.getElementAt(i).toString();
        }
        SortingAlgorithm.sort(array);
        list.removeAllElements();
        list.addElement("ALL");
        for (int i = 0; i < array.length; i++) {
            list.addElement(array[i]);
        }
        return list;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        model.addElement("1/4 Teaspoon");
        model.addElement("1/2 Teaspoon");
        model.addElement("1 Teaspoon");
        model.addElement("1 Tablespoon");
        model.addElement("1/4 Cup");
        model.addElement("1/3 Cup");
        model.addElement("1/2 Cup");
        model.addElement("1 Cup");
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);

            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JMenu MenuPrint;
    public static javax.swing.JButton btnAdd;
    public static javax.swing.JButton btnBack;
    public static javax.swing.JButton btnCalculate;
    public static javax.swing.JButton btnCancel2;
    public static javax.swing.JButton btnCloseAbout;
    public static javax.swing.JButton btnEdit;
    public static javax.swing.JButton btnHelp1;
    public static javax.swing.JButton btnHelp2;
    public static javax.swing.JButton btnOK1;
    public static javax.swing.JButton btnOK3;
    public static javax.swing.JButton btnOK4;
    public static javax.swing.JButton btnRemove;
    public static javax.swing.JButton btnSearch2;
    public static javax.swing.JButton btnTitle;
    public static javax.swing.JButton btnUseSelected;
    public static javax.swing.JComboBox cmbCategory;
    public static javax.swing.JComboBox cmbFraction;
    public static javax.swing.JComboBox cmbHelp;
    public static javax.swing.JComboBox cmbUnit;
    public static javax.swing.JFileChooser fcPrinter;
    public static javax.swing.JFileChooser fcSave;
    public static javax.swing.JDialog frameAbout;
    public static javax.swing.JFrame frameDirections;
    public static javax.swing.JFrame frameEasyEntry;
    public static javax.swing.JFrame frameHelp;
    public static javax.swing.JFrame framePrint;
    public static javax.swing.JFrame frameRecepieEntry;
    public static javax.swing.JFrame frameTitle;
    public static javax.swing.JLabel jLabel1;
    public static javax.swing.JLabel jLabel2;
    public static javax.swing.JLabel jLabel3;
    public static javax.swing.JLayeredPane jLayeredPane1;
    public static javax.swing.JMenuBar jMenuBar1;
    public static javax.swing.JMenuBar jMenuBar2;
    public static javax.swing.JMenuItem jMenuItem1;
    public static javax.swing.JMenuItem jMenuItem2;
    public static javax.swing.JPanel jPanel1;
    public static javax.swing.JPopupMenu jPopupMenu1;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JScrollPane jScrollPane3;
    public static javax.swing.JScrollPane jScrollPane4;
    public static javax.swing.JScrollPane jScrollPane5;
    public static javax.swing.JScrollPane jScrollPane6;
    public static javax.swing.JTextArea jTextArea1;
    public static javax.swing.JLabel lblLoad;
    public static javax.swing.JList listRecipe;
    public static javax.swing.JList listResults;
    public static javax.swing.JMenu menuAbout;
    public static javax.swing.JMenu menuAbout1;
    public static javax.swing.JCheckBoxMenuItem menuCheckEasyEntry;
    public static javax.swing.JMenu menuHelp;
    public static javax.swing.JMenu menuHelp1;
    public static javax.swing.JMenu menuOpen1;
    public static javax.swing.JMenu menuOptions;
    public static javax.swing.JMenu menuSave;
    public static javax.swing.JMenu menuSave1;
    public static javax.swing.JTextArea output;
    public static javax.swing.JScrollPane scrollPane;
    public static javax.swing.JSpinner spQuantity;
    public static javax.swing.JTextArea taDirections;
    public static javax.swing.JTextArea taHelp;
    public static javax.swing.JTextArea taInstructions;
    public static javax.swing.JTextField tfName;
    public static javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables
}
